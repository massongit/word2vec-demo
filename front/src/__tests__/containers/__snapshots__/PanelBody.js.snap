// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/KeyWords 初期状態からStateが遷移した際に、Componentが正しく配置されている 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <KeyWords
    dispatch={[Function]}
    negative={
        Array [
            "男",
          ]
    }
    positive={
        Array [
            "王",
            "女",
          ]
    }
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    storeSubscription={
        Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          htmlFor="keywords"
>
          <FormattedMessage
                    id="header.keywords"
                    values={Object {}}
          />
</label>,
        <p
          id="keywords"
>
          +王 +女 -男
</p>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <FormattedMessage
            id="header.keywords"
            values={Object {}}
/>,
          "htmlFor": "keywords",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "header.keywords",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "+王 +女 -男",
          "id": "keywords",
        },
        "ref": null,
        "rendered": "+王 +女 -男",
        "type": "p",
      },
    ],
    "type": "p",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            htmlFor="keywords"
>
            <FormattedMessage
                        id="header.keywords"
                        values={Object {}}
            />
</label>,
          <p
            id="keywords"
>
            +王 +女 -男
</p>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              id="header.keywords"
              values={Object {}}
/>,
            "htmlFor": "keywords",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "header.keywords",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "+王 +女 -男",
            "id": "keywords",
          },
          "ref": null,
          "rendered": "+王 +女 -男",
          "type": "p",
        },
      ],
      "type": "p",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`containers/PanelBody Componentが正しく配置されている 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    dispatch={[Function]}
    method={undefined}
    similar={Array []}
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    storeSubscription={
        Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "bsClass": "container",
      "children": Array [
        <Header />,
        <InjectIntl(DescriptionPanel) />,
        <MethodPanel />,
        undefined,
        undefined,
      ],
      "componentClass": "div",
      "fluid": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      undefined,
      undefined,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "bsClass": "container",
        "children": Array [
          <Header />,
          <InjectIntl(DescriptionPanel) />,
          <MethodPanel />,
          undefined,
          undefined,
        ],
        "componentClass": "div",
        "fluid": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        undefined,
        undefined,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`containers/PanelBody Componentが正しく配置されている 2`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    dispatch={[Function]}
    method={undefined}
    similar={Array []}
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    storeSubscription={
        Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "bsClass": "container",
      "children": Array [
        <Header />,
        <InjectIntl(DescriptionPanel) />,
        <MethodPanel />,
        undefined,
        undefined,
      ],
      "componentClass": "div",
      "fluid": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      undefined,
      undefined,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "bsClass": "container",
        "children": Array [
          <Header />,
          <InjectIntl(DescriptionPanel) />,
          <MethodPanel />,
          undefined,
          undefined,
        ],
        "componentClass": "div",
        "fluid": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        undefined,
        undefined,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`containers/PanelBody Componentが正しく配置されている 3`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    dispatch={[Function]}
    method="fasttext"
    similar={Array []}
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    storeSubscription={
        Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "bsClass": "container",
      "children": Array [
        <Header />,
        <InjectIntl(DescriptionPanel) />,
        <MethodPanel />,
        <InputPanel />,
        undefined,
      ],
      "componentClass": "div",
      "fluid": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      undefined,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "bsClass": "container",
        "children": Array [
          <Header />,
          <InjectIntl(DescriptionPanel) />,
          <MethodPanel />,
          <InputPanel />,
          undefined,
        ],
        "componentClass": "div",
        "fluid": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        undefined,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`containers/PanelBody Componentが正しく配置されている 4`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    dispatch={[Function]}
    method="fasttext"
    similar={
        Array [
            Object {
              "cosine": 0.6129051446914673,
              "word": "女王",
            },
            Object {
              "cosine": 0.5734513998031616,
              "word": "大王",
            },
            Object {
              "cosine": 0.5623782873153687,
              "word": "王女",
            },
            Object {
              "cosine": 0.557570219039917,
              "word": "王妃",
            },
            Object {
              "cosine": 0.536829948425293,
              "word": "デュエルモンスターズビギナーズパック",
            },
            Object {
              "cosine": 0.5333640575408936,
              "word": "デュエルモンスターズエキスパート",
            },
            Object {
              "cosine": 0.5321550369262695,
              "word": "戯",
            },
            Object {
              "cosine": 0.5298371911048889,
              "word": "遊戯",
            },
            Object {
              "cosine": 0.5250808000564575,
              "word": "デュエルモンスターズ",
            },
            Object {
              "cosine": 0.525033175945282,
              "word": "王家",
            },
          ]
    }
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    storeSubscription={
        Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "bsClass": "container",
      "children": Array [
        <Header />,
        <InjectIntl(DescriptionPanel) />,
        <MethodPanel />,
        <InputPanel />,
        <OutputPanel />,
      ],
      "componentClass": "div",
      "fluid": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "bsClass": "container",
        "children": Array [
          <Header />,
          <InjectIntl(DescriptionPanel) />,
          <MethodPanel />,
          <InputPanel />,
          <OutputPanel />,
        ],
        "componentClass": "div",
        "fluid": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`containers/PanelBody Componentが正しく配置されている 5`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PanelBody
    intl={
        Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {
              "calculate": "計算",
              "description.fasttext": "2016年にFaceBook社によって提唱された手法であり、Word2Vecの改良版にあたります。
        モデル内に存在しない単語のベクトルの推定や文書の分類ができるようになっています。",
              "description.input": "日本語の単語を空白で区切って入力し、計算ボタンをクリックしてください。",
              "description.input.supplement.1": "引き算を行う場合には、単語の先頭に『-』を付けます。",
              "description.input.supplement.2": "足し算を行う場合には、単語の先頭に『+』を付けることができます (基本的には付けなくても問題ありませんが、単語が『+』や『-』で始まる場合には必ず付けてください)。",
              "description.method": "以下から手法を選択してください。",
              "description.word2vec": "2013年にGoogle社によって提唱された手法であり、自然言語処理の様々な分野で用いられています。",
              "description.wordEmbedding": "単語を意味のベクトルで表現するための技術です。
        これを利用して、単語の足し算や引き算を行うことができます。",
              "errorMessage.default": "エラーが発生しました: {message}",
              "errorMessage.predict": "計算中にエラーが発生しました: {message}",
              "header.candidate": "候補",
              "header.cosine": "コサイン類似度 (-1 〜 1)",
              "header.keywords": "<キーワード>",
              "header.word": "単語",
              "title.description": "概要",
              "title.input": "入力",
              "title.method": "手法",
              "title.result": "結果",
              "unknown": "(予測不能)",
            },
            "now": [Function],
            "textComponent": "span",
          }
    }
    messageId="description.input"
>
    <InjectIntl(Connect(Input))
        store={
            Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              }
        }
    />
</PanelBody>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "bsClass": "panel",
      "children": Array [
        <p>
          日本語の単語を空白で区切って入力し、計算ボタンをクリックしてください。
</p>,
        <InjectIntl(Connect(Input))
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
/>,
      ],
      "collapsible": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "日本語の単語を空白で区切って入力し、計算ボタンをクリックしてください。",
            undefined,
          ],
        },
        "ref": null,
        "rendered": Array [
          "日本語の単語を空白で区切って入力し、計算ボタンをクリックしてください。",
          undefined,
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "bsClass": "panel",
        "children": Array [
          <p>
            日本語の単語を空白で区切って入力し、計算ボタンをクリックしてください。
</p>,
          <InjectIntl(Connect(Input))
            store={
                        Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  }
            }
/>,
        ],
        "collapsible": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "日本語の単語を空白で区切って入力し、計算ボタンをクリックしてください。",
              undefined,
            ],
          },
          "ref": null,
          "rendered": Array [
            "日本語の単語を空白で区切って入力し、計算ボタンをクリックしてください。",
            undefined,
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "intl": Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "calculate": "計算",
          "description.fasttext": "2016年にFaceBook社によって提唱された手法であり、Word2Vecの改良版にあたります。
モデル内に存在しない単語のベクトルの推定や文書の分類ができるようになっています。",
          "description.input": "日本語の単語を空白で区切って入力し、計算ボタンをクリックしてください。",
          "description.input.supplement.1": "引き算を行う場合には、単語の先頭に『-』を付けます。",
          "description.input.supplement.2": "足し算を行う場合には、単語の先頭に『+』を付けることができます (基本的には付けなくても問題ありませんが、単語が『+』や『-』で始まる場合には必ず付けてください)。",
          "description.method": "以下から手法を選択してください。",
          "description.word2vec": "2013年にGoogle社によって提唱された手法であり、自然言語処理の様々な分野で用いられています。",
          "description.wordEmbedding": "単語を意味のベクトルで表現するための技術です。
これを利用して、単語の足し算や引き算を行うことができます。",
          "errorMessage.default": "エラーが発生しました: {message}",
          "errorMessage.predict": "計算中にエラーが発生しました: {message}",
          "header.candidate": "候補",
          "header.cosine": "コサイン類似度 (-1 〜 1)",
          "header.keywords": "<キーワード>",
          "header.word": "単語",
          "title.description": "概要",
          "title.input": "入力",
          "title.method": "手法",
          "title.result": "結果",
          "unknown": "(予測不能)",
        },
        "now": [Function],
        "textComponent": "span",
      },
    },
  },
}
`;
