// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/KeyWords 初期状態からStateが遷移した際に、Componentが正しく配置されている 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <KeyWords
    dispatch={[Function]}
    negative={
      Array [
        "男",
      ]
    }
    positive={
      Array [
        "王",
        "女",
      ]
    }
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          htmlFor="keywords"
        >
          <FormattedMessage
            id="header.keywords"
            values={Object {}}
          />
        </label>,
        <p
          id="keywords"
        >
          +王 +女 -男
        </p>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <FormattedMessage
            id="header.keywords"
            values={Object {}}
          />,
          "htmlFor": "keywords",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "header.keywords",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "+王 +女 -男",
          "id": "keywords",
        },
        "ref": null,
        "rendered": "+王 +女 -男",
        "type": "p",
      },
    ],
    "type": "p",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            htmlFor="keywords"
          >
            <FormattedMessage
              id="header.keywords"
              values={Object {}}
            />
          </label>,
          <p
            id="keywords"
          >
            +王 +女 -男
          </p>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              id="header.keywords"
              values={Object {}}
            />,
            "htmlFor": "keywords",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "header.keywords",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "+王 +女 -男",
            "id": "keywords",
          },
          "ref": null,
          "rendered": "+王 +女 -男",
          "type": "p",
        },
      ],
      "type": "p",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`containers/OutputCard 初期状態からStateが遷移した際に、Componentが正しく配置されている 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Card
    className="mt-4"
    tag="div"
  >
    <CardHeader
      tag="div"
    >
      <FormattedMessage
        id="title.result"
        values={Object {}}
      />
    </CardHeader>
    <InjectIntl(PanelCardBody)>
      <Connect(KeyWords) />
    </InjectIntl(PanelCardBody)>
    <InjectIntl(Connect(Information)) />
  </Card>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <CardHeader
          tag="div"
        >
          <FormattedMessage
            id="title.result"
            values={Object {}}
          />
        </CardHeader>,
        <InjectIntl(PanelCardBody)>
          <Connect(KeyWords) />
        </InjectIntl(PanelCardBody)>,
        <InjectIntl(Connect(Information)) />,
      ],
      "className": "mt-4 card",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <FormattedMessage
            id="title.result"
            values={Object {}}
          />,
          "tag": "div",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "title.result",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Connect(KeyWords) />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <CardHeader
            tag="div"
          >
            <FormattedMessage
              id="title.result"
              values={Object {}}
            />
          </CardHeader>,
          <InjectIntl(PanelCardBody)>
            <Connect(KeyWords) />
          </InjectIntl(PanelCardBody)>,
          <InjectIntl(Connect(Information)) />,
        ],
        "className": "mt-4 card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <FormattedMessage
              id="title.result"
              values={Object {}}
            />,
            "tag": "div",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "title.result",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Connect(KeyWords) />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
